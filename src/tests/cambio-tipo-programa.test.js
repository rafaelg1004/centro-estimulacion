/**
 * Test para cambio de tipo de programa en valoraci√≥n perinatal
 * Reproduce el escenario donde se cambia de "educacion" a "fisico"
 */

const BASE_URL = 'http://localhost:5000/api';
const PACIENTE_ID = '6877c08ff9fe7ba56a9ad786';

async function testCambioTipoPrograma() {
  console.log('üîÑ Iniciando test de cambio de tipo de programa...\n');

  try {
    // PASO 1: Crear valoraci√≥n inicial con tipo "educacion"
    console.log('üìù PASO 1: Creando valoraci√≥n inicial - Programa Educaci√≥n');
    const valoracionId = await crearValoracionEducacion();
    
    // PASO 2: Verificar estado inicial
    console.log('üîç PASO 2: Verificando estado inicial');
    await verificarEstadoInicial(valoracionId);
    
    // PASO 3: Cambiar a programa f√≠sico
    console.log('üîÑ PASO 3: Cambiando a programa f√≠sico');
    await cambiarAFisico(valoracionId);
    
    // PASO 4: Verificar cambio
    console.log('‚úÖ PASO 4: Verificando cambio aplicado');
    await verificarCambioAplicado(valoracionId);
    
    console.log('\n‚úÖ Test de cambio de tipo completado exitosamente!');
    
  } catch (error) {
    console.error('‚ùå Error en test de cambio de tipo:', error);
  }
}

async function crearValoracionEducacion() {
  const sesionesEducacion = [
    "Sesi√≥n 1: Cambios anat√≥micos y fisiol√≥gicos del embarazo",
    "Sesi√≥n 2: Nutrici√≥n durante el embarazo", 
    "Sesi√≥n 3: Ejercicio y relajaci√≥n",
    "Sesi√≥n 4: Trabajo de parto y parto",
    "Sesi√≥n 5: Manejo del dolor",
    "Sesi√≥n 6: Lactancia materna",
    "Sesi√≥n 7: Cuidados del reci√©n nacido",
    "Sesi√≥n 8: Sesi√≥n para abuelos",
    "Sesi√≥n 9: Visita postparto inmediato",
    "Sesi√≥n 10: Visita postparto 15 d√≠as"
  ].map(nombre => ({ nombre, fecha: "", firmaPaciente: "" }));

  const datosValoracion = {
    paciente: PACIENTE_ID,
    fecha: "2025-08-13",
    hora: "12:36",
    motivoConsulta: "Test cambio tipo programa",
    tipoPrograma: "educacion",
    sesiones: sesionesEducacion,
    sesionesIntensivo: [],
    
    // Firmas para educaci√≥n
    firmaPacienteGeneral: "test-firma-paciente-educacion",
    firmaFisioterapeutaGeneral: "test-firma-fisioterapeuta-educacion",
    firmaPacienteEducacion: "test-firma-paciente-educacion-especifica",
    firmaFisioterapeutaEducacion: "test-firma-fisioterapeuta-educacion-especifica"
  };

  const response = await fetch(`${BASE_URL}/consentimiento-perinatal`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(datosValoracion)
  });

  if (!response.ok) {
    throw new Error(`Error creando valoraci√≥n educaci√≥n: ${response.statusText}`);
  }

  const resultado = await response.json();
  console.log(`‚úÖ Valoraci√≥n educaci√≥n creada con ID: ${resultado._id}`);
  return resultado._id;
}

async function verificarEstadoInicial(valoracionId) {
  const response = await fetch(`${BASE_URL}/consentimiento-perinatal/${valoracionId}`);
  if (!response.ok) {
    throw new Error('Error obteniendo valoraci√≥n inicial');
  }

  const valoracion = await response.json();
  
  console.log(`üìä Estado inicial:`);
  console.log(`   - Tipo programa: ${valoracion.tipoPrograma}`);
  console.log(`   - Tipo original: ${valoracion._tipoPrograma_original || 'No definido'}`);
  console.log(`   - Sesiones educaci√≥n: ${valoracion.sesiones?.length || 0}`);
  console.log(`   - Sesiones f√≠sico: ${valoracion.sesionesIntensivo?.length || 0}`);
  console.log(`   - Firmas educaci√≥n: ${valoracion.firmaPacienteEducacion ? 'S√ç' : 'NO'}`);
  console.log(`   - Firmas f√≠sico: ${valoracion.firmaPacienteFisico ? 'S√ç' : 'NO'}`);
}

async function cambiarAFisico(valoracionId) {
  // Obtener valoraci√≥n actual
  const getResponse = await fetch(`${BASE_URL}/consentimiento-perinatal/${valoracionId}`);
  if (!getResponse.ok) {
    throw new Error('Error obteniendo valoraci√≥n para cambiar');
  }
  
  const valoracion = await getResponse.json();
  
  // Simular el cambio que se est√° haciendo en el frontend
  const datosActualizados = {
    ...valoracion,
    tipoPrograma: "fisico",
    
    // Agregar firmas f√≠sicas (simulando lo que hace el frontend)
    firmaPacienteFisico: "https://firmasdmamitas.s3.us-east-2.amazonaws.com/test-firma-fisico-paciente.png",
    firmaFisioterapeutaFisico: "https://firmasdmamitas.s3.us-east-2.amazonaws.com/test-firma-fisico-fisioterapeuta.png",
    
    // Mantener las firmas de educaci√≥n existentes
    // (esto simula el comportamiento actual del frontend)
    
    _actualizarSesiones: true
  };

  console.log('üîÑ Enviando cambio a f√≠sico...');
  console.log(`   - Tipo programa: ${datosActualizados.tipoPrograma}`);
  console.log(`   - Firmas f√≠sico: ${datosActualizados.firmaPacienteFisico ? 'AGREGADAS' : 'NO'}`);
  console.log(`   - Firmas educaci√≥n: ${datosActualizados.firmaPacienteEducacion ? 'MANTENIDAS' : 'NO'}`);

  const putResponse = await fetch(`${BASE_URL}/consentimiento-perinatal/${valoracionId}`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(datosActualizados)
  });

  if (!putResponse.ok) {
    const errorText = await putResponse.text();
    throw new Error(`Error cambiando a f√≠sico: ${putResponse.statusText} - ${errorText}`);
  }

  const resultado = await putResponse.json();
  console.log('‚úÖ Cambio enviado al backend');
  return resultado;
}

async function verificarCambioAplicado(valoracionId) {
  const response = await fetch(`${BASE_URL}/consentimiento-perinatal/${valoracionId}`);
  if (!response.ok) {
    throw new Error('Error obteniendo valoraci√≥n despu√©s del cambio');
  }

  const valoracion = await response.json();
  
  console.log(`üìä Estado despu√©s del cambio:`);
  console.log(`   - Tipo programa: ${valoracion.tipoPrograma}`);
  console.log(`   - Tipo original: ${valoracion._tipoPrograma_original || 'No definido'}`);
  console.log(`   - Sesiones educaci√≥n: ${valoracion.sesiones?.length || 0}`);
  console.log(`   - Sesiones f√≠sico: ${valoracion.sesionesIntensivo?.length || 0}`);
  console.log(`   - Firmas educaci√≥n: ${valoracion.firmaPacienteEducacion ? 'S√ç' : 'NO'}`);
  console.log(`   - Firmas f√≠sico: ${valoracion.firmaPacienteFisico ? 'S√ç' : 'NO'}`);
  
  // Verificaciones
  if (valoracion.tipoPrograma !== 'fisico') {
    throw new Error(`‚ùå Tipo programa no cambi√≥. Esperado: fisico, Actual: ${valoracion.tipoPrograma}`);
  }
  
  if (!valoracion.firmaPacienteFisico) {
    throw new Error('‚ùå Firmas f√≠sicas no se guardaron');
  }
  
  console.log('‚úÖ Cambio aplicado correctamente');
}

// Ejecutar test
testCambioTipoPrograma();