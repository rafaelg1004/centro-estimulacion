/**
 * Test para verificar que la correcci√≥n de limpieza de firmas funciona
 * Simula el escenario exacto del problema reportado
 */

const BASE_URL = 'http://localhost:5000/api';
const PACIENTE_ID = '6877c08ff9fe7ba56a9ad786';

async function testCorreccionFirmas() {
  console.log('üîß Iniciando test de correcci√≥n de firmas...\n');

  try {
    // PASO 1: Crear valoraci√≥n con educaci√≥n (como en el problema original)
    console.log('üìù PASO 1: Creando valoraci√≥n inicial con educaci√≥n');
    const valoracionId = await crearValoracionEducacionOriginal();
    
    // PASO 2: Simular el cambio problem√°tico (agregar firmas f√≠sicas sin limpiar educaci√≥n)
    console.log('üö® PASO 2: Simulando el problema - cambio sin limpiar firmas');
    await simularCambioProblematico(valoracionId);
    
    // PASO 3: Verificar que el problema existe
    console.log('üîç PASO 3: Verificando que el problema existe');
    await verificarProblemaExiste(valoracionId);
    
    // PASO 4: Aplicar la correcci√≥n
    console.log('üîß PASO 4: Aplicando la correcci√≥n');
    await aplicarCorreccion(valoracionId);
    
    // PASO 5: Verificar que la correcci√≥n funciona
    console.log('‚úÖ PASO 5: Verificando que la correcci√≥n funciona');
    await verificarCorreccionFunciona(valoracionId);
    
    console.log('\n‚úÖ Test de correcci√≥n completado exitosamente!');
    
  } catch (error) {
    console.error('‚ùå Error en test de correcci√≥n:', error);
  }
}

async function crearValoracionEducacionOriginal() {
  // Crear exactamente como en el problema original
  const datosValoracion = {
    paciente: PACIENTE_ID,
    fecha: "2025-08-13",
    hora: "12:36",
    motivoConsulta: "Test correcci√≥n firmas",
    tipoPrograma: "educacion",
    
    // Firmas de educaci√≥n (como en el problema original)
    firmaPacienteGeneral: "https://firmasdmamitas.s3.us-east-2.amazonaws.com/test-firma-paciente-general.png",
    firmaFisioterapeutaGeneral: "https://firmasdmamitas.s3.us-east-2.amazonaws.com/test-firma-fisio-general.png",
    firmaPacienteEducacion: "https://firmasdmamitas.s3.us-east-2.amazonaws.com/test-firma-paciente-educacion.png",
    firmaFisioterapeutaEducacion: "https://firmasdmamitas.s3.us-east-2.amazonaws.com/test-firma-fisio-educacion.png",
    
    // Sesiones de educaci√≥n
    sesiones: Array.from({length: 10}, (_, i) => ({
      nombre: `Sesi√≥n ${i+1}: Educaci√≥n`,
      fecha: "",
      firmaPaciente: ""
    }))
  };

  const response = await fetch(`${BASE_URL}/consentimiento-perinatal`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(datosValoracion)
  });

  const resultado = await response.json();
  console.log(`‚úÖ Valoraci√≥n educaci√≥n creada: ${resultado._id}`);
  return resultado._id;
}

async function simularCambioProblematico(valoracionId) {
  // Obtener valoraci√≥n actual
  const getResponse = await fetch(`${BASE_URL}/consentimiento-perinatal/${valoracionId}`);
  const valoracion = await getResponse.json();
  
  // Simular el cambio problem√°tico: cambiar a f√≠sico SIN limpiar firmas de educaci√≥n
  const datosProblematicos = {
    ...valoracion,
    tipoPrograma: "fisico",
    
    // Agregar firmas f√≠sicas (como hace el frontend)
    firmaPacienteFisico: "https://firmasdmamitas.s3.us-east-2.amazonaws.com/test-firma-paciente-fisico.png",
    firmaFisioterapeutaFisico: "https://firmasdmamitas.s3.us-east-2.amazonaws.com/test-firma-fisio-fisico.png",
    
    // NO limpiar firmas de educaci√≥n (este es el problema)
    // Las firmas de educaci√≥n se mantienen
    
    _actualizarSesiones: true
  };

  console.log('üö® Enviando cambio problem√°tico (sin limpiar firmas educaci√≥n)...');
  
  const putResponse = await fetch(`${BASE_URL}/consentimiento-perinatal/${valoracionId}`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(datosProblematicos)
  });

  if (!putResponse.ok) {
    throw new Error(`Error en cambio problem√°tico: ${putResponse.statusText}`);
  }

  console.log('‚úÖ Cambio problem√°tico aplicado');
}

async function verificarProblemaExiste(valoracionId) {
  const response = await fetch(`${BASE_URL}/consentimiento-perinatal/${valoracionId}`);
  const valoracion = await response.json();
  
  console.log('üîç Estado despu√©s del cambio problem√°tico:');
  console.log(`   - Tipo programa: ${valoracion.tipoPrograma}`);
  console.log(`   - Firmas f√≠sicas: ${valoracion.firmaPacienteFisico ? 'PRESENTES' : 'AUSENTES'}`);
  console.log(`   - Firmas educaci√≥n general: ${valoracion.firmaPacienteGeneral ? 'PRESENTES' : 'AUSENTES'}`);
  console.log(`   - Firmas educaci√≥n espec√≠fica: ${valoracion.firmaPacienteEducacion ? 'PRESENTES' : 'AUSENTES'}`);
  
  // Verificar que el problema existe
  const problemaExiste = (
    valoracion.tipoPrograma === 'fisico' &&
    valoracion.firmaPacienteFisico && // Tiene firmas f√≠sicas
    (valoracion.firmaPacienteGeneral || valoracion.firmaPacienteEducacion) // Y tambi√©n tiene firmas de educaci√≥n
  );
  
  if (problemaExiste) {
    console.log('üö® PROBLEMA CONFIRMADO: Firmas de ambos tipos presentes');
  } else {
    throw new Error('‚ùå No se pudo reproducir el problema');
  }
}

async function aplicarCorreccion(valoracionId) {
  // Obtener valoraci√≥n actual
  const getResponse = await fetch(`${BASE_URL}/consentimiento-perinatal/${valoracionId}`);
  const valoracion = await getResponse.json();
  
  // Aplicar la correcci√≥n: cambiar tipo y limpiar firmas correctamente
  const datosCorregidos = {
    ...valoracion,
    tipoPrograma: "fisico",
    
    // Mantener firmas f√≠sicas
    firmaPacienteFisico: valoracion.firmaPacienteFisico,
    firmaFisioterapeutaFisico: valoracion.firmaFisioterapeutaFisico,
    
    // LIMPIAR firmas de educaci√≥n (esta es la correcci√≥n)
    firmaPacienteGeneral: '',
    firmaFisioterapeutaGeneral: '',
    firmaPacienteEducacion: '',
    firmaFisioterapeutaEducacion: '',
    
    // Marcar que cambi√≥ el tipo original para activar la l√≥gica de limpieza
    _tipoPrograma_original: 'educacion',
    
    _actualizarSesiones: true
  };

  console.log('üîß Aplicando correcci√≥n (limpiando firmas de educaci√≥n)...');
  
  const putResponse = await fetch(`${BASE_URL}/consentimiento-perinatal/${valoracionId}`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(datosCorregidos)
  });

  if (!putResponse.ok) {
    throw new Error(`Error aplicando correcci√≥n: ${putResponse.statusText}`);
  }

  console.log('‚úÖ Correcci√≥n aplicada');
}

async function verificarCorreccionFunciona(valoracionId) {
  const response = await fetch(`${BASE_URL}/consentimiento-perinatal/${valoracionId}`);
  const valoracion = await response.json();
  
  console.log('üîç Estado despu√©s de la correcci√≥n:');
  console.log(`   - Tipo programa: ${valoracion.tipoPrograma}`);
  console.log(`   - Firmas f√≠sicas: ${valoracion.firmaPacienteFisico ? 'PRESENTES' : 'AUSENTES'}`);
  console.log(`   - Firmas educaci√≥n general: ${valoracion.firmaPacienteGeneral ? 'PRESENTES' : 'AUSENTES'}`);
  console.log(`   - Firmas educaci√≥n espec√≠fica: ${valoracion.firmaPacienteEducacion ? 'PRESENTES' : 'AUSENTES'}`);
  
  // Verificar que la correcci√≥n funciona
  const errores = [];
  
  if (valoracion.tipoPrograma !== 'fisico') {
    errores.push('Tipo de programa incorrecto');
  }
  
  if (!valoracion.firmaPacienteFisico) {
    errores.push('Faltan firmas f√≠sicas');
  }
  
  if (valoracion.firmaPacienteGeneral) {
    errores.push('Firmas de educaci√≥n general no se limpiaron');
  }
  
  if (valoracion.firmaPacienteEducacion) {
    errores.push('Firmas de educaci√≥n espec√≠fica no se limpiaron');
  }
  
  if (errores.length > 0) {
    throw new Error(`‚ùå Correcci√≥n fall√≥:\n${errores.map(e => `   - ${e}`).join('\n')}`);
  }
  
  console.log('‚úÖ CORRECCI√ìN EXITOSA: Solo quedan firmas del tipo correcto');
}

// Funci√≥n para mostrar el antes y despu√©s
async function mostrarAntesYDespues() {
  console.log('üìä DEMOSTRACI√ìN: ANTES Y DESPU√âS DE LA CORRECCI√ìN\n');
  
  try {
    // Crear valoraci√≥n
    const valoracionId = await crearValoracionEducacionOriginal();
    
    // Estado inicial
    let response = await fetch(`${BASE_URL}/consentimiento-perinatal/${valoracionId}`);
    let valoracion = await response.json();
    
    console.log('üìã ANTES (educaci√≥n):');
    console.log(`   - Tipo: ${valoracion.tipoPrograma}`);
    console.log(`   - Firmas educaci√≥n: ${valoracion.firmaPacienteEducacion ? 'S√ç' : 'NO'}`);
    console.log(`   - Firmas f√≠sico: ${valoracion.firmaPacienteFisico ? 'S√ç' : 'NO'}`);
    
    // Cambio problem√°tico
    await simularCambioProblematico(valoracionId);
    
    response = await fetch(`${BASE_URL}/consentimiento-perinatal/${valoracionId}`);
    valoracion = await response.json();
    
    console.log('\nüö® PROBLEMA (f√≠sico con firmas de educaci√≥n):');
    console.log(`   - Tipo: ${valoracion.tipoPrograma}`);
    console.log(`   - Firmas educaci√≥n: ${valoracion.firmaPacienteEducacion ? 'S√ç (PROBLEMA)' : 'NO'}`);
    console.log(`   - Firmas f√≠sico: ${valoracion.firmaPacienteFisico ? 'S√ç' : 'NO'}`);
    
    // Aplicar correcci√≥n
    await aplicarCorreccion(valoracionId);
    
    response = await fetch(`${BASE_URL}/consentimiento-perinatal/${valoracionId}`);
    valoracion = await response.json();
    
    console.log('\n‚úÖ DESPU√âS (f√≠sico solo con firmas f√≠sicas):');
    console.log(`   - Tipo: ${valoracion.tipoPrograma}`);
    console.log(`   - Firmas educaci√≥n: ${valoracion.firmaPacienteEducacion ? 'S√ç' : 'NO (CORREGIDO)'}`);
    console.log(`   - Firmas f√≠sico: ${valoracion.firmaPacienteFisico ? 'S√ç' : 'NO'}`);
    
  } catch (error) {
    console.error('Error en demostraci√≥n:', error);
  }
}

// Ejecutar tests
async function ejecutarTodos() {
  await mostrarAntesYDespues();
  console.log('\n' + '='.repeat(60) + '\n');
  await testCorreccionFirmas();
}

ejecutarTodos();