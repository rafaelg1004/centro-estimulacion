/**
 * Test para verificar limpieza de firmas al cambiar tipo de programa
 * El problema: al cambiar de "educacion" a "fisico", las firmas de educaci√≥n no se eliminan
 */

const BASE_URL = 'http://localhost:5000/api';
const PACIENTE_ID = '6877c08ff9fe7ba56a9ad786';

async function testLimpiezaFirmas() {
  console.log('üßπ Iniciando test de limpieza de firmas al cambiar tipo...\n');

  try {
    // PASO 1: Crear valoraci√≥n con educaci√≥n y firmas
    console.log('üìù PASO 1: Creando valoraci√≥n con programa educaci√≥n');
    const valoracionId = await crearConEducacion();
    
    // PASO 2: Verificar firmas iniciales
    console.log('üîç PASO 2: Verificando firmas de educaci√≥n');
    await verificarFirmasEducacion(valoracionId);
    
    // PASO 3: Cambiar a f√≠sico (deber√≠a limpiar firmas de educaci√≥n)
    console.log('üîÑ PASO 3: Cambiando a f√≠sico - DEBE limpiar firmas educaci√≥n');
    await cambiarAFisicoLimpiando(valoracionId);
    
    // PASO 4: Verificar que solo quedan firmas f√≠sicas
    console.log('‚úÖ PASO 4: Verificando que solo quedan firmas f√≠sicas');
    await verificarSoloFirmasFisicas(valoracionId);
    
    console.log('\n‚úÖ Test de limpieza de firmas completado!');
    
  } catch (error) {
    console.error('‚ùå Error en test de limpieza:', error);
  }
}

async function crearConEducacion() {
  const datosValoracion = {
    paciente: PACIENTE_ID,
    fecha: "2025-08-13",
    hora: "12:36",
    motivoConsulta: "Test limpieza firmas",
    tipoPrograma: "educacion",
    
    // Firmas espec√≠ficas de educaci√≥n
    firmaPacienteGeneral: "https://test.com/firma-paciente-general.png",
    firmaFisioterapeutaGeneral: "https://test.com/firma-fisio-general.png",
    firmaPacienteEducacion: "https://test.com/firma-paciente-educacion.png",
    firmaFisioterapeutaEducacion: "https://test.com/firma-fisio-educacion.png",
    
    // Sesiones de educaci√≥n
    sesiones: Array.from({length: 10}, (_, i) => ({
      nombre: `Sesi√≥n ${i+1}: Educaci√≥n`,
      fecha: "",
      firmaPaciente: ""
    }))
  };

  const response = await fetch(`${BASE_URL}/consentimiento-perinatal`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(datosValoracion)
  });

  if (!response.ok) {
    throw new Error(`Error creando valoraci√≥n: ${response.statusText}`);
  }

  const resultado = await response.json();
  console.log(`‚úÖ Valoraci√≥n creada con ID: ${resultado._id}`);
  return resultado._id;
}

async function verificarFirmasEducacion(valoracionId) {
  const response = await fetch(`${BASE_URL}/consentimiento-perinatal/${valoracionId}`);
  const valoracion = await response.json();
  
  console.log('üìã Firmas de educaci√≥n presentes:');
  console.log(`   - firmaPacienteGeneral: ${valoracion.firmaPacienteGeneral ? '‚úÖ' : '‚ùå'}`);
  console.log(`   - firmaFisioterapeutaGeneral: ${valoracion.firmaFisioterapeutaGeneral ? '‚úÖ' : '‚ùå'}`);
  console.log(`   - firmaPacienteEducacion: ${valoracion.firmaPacienteEducacion ? '‚úÖ' : '‚ùå'}`);
  console.log(`   - firmaFisioterapeutaEducacion: ${valoracion.firmaFisioterapeutaEducacion ? '‚úÖ' : '‚ùå'}`);
  
  // Verificar que NO hay firmas f√≠sicas
  console.log('üìã Firmas f√≠sicas (deben estar vac√≠as):');
  console.log(`   - firmaPacienteFisico: ${valoracion.firmaPacienteFisico ? '‚ùå PRESENTE' : '‚úÖ VAC√çA'}`);
  console.log(`   - firmaFisioterapeutaFisico: ${valoracion.firmaFisioterapeutaFisico ? '‚ùå PRESENTE' : '‚úÖ VAC√çA'}`);
}

async function cambiarAFisicoLimpiando(valoracionId) {
  // Obtener valoraci√≥n actual
  const getResponse = await fetch(`${BASE_URL}/consentimiento-perinatal/${valoracionId}`);
  const valoracion = await getResponse.json();
  
  // Preparar datos para cambio a f√≠sico
  const datosActualizados = {
    ...valoracion,
    tipoPrograma: "fisico",
    
    // AGREGAR firmas f√≠sicas
    firmaPacienteFisico: "https://test.com/firma-paciente-fisico.png",
    firmaFisioterapeutaFisico: "https://test.com/firma-fisio-fisico.png",
    
    // LIMPIAR firmas de educaci√≥n (esto es lo que debe hacer el frontend)
    firmaPacienteGeneral: "",
    firmaFisioterapeutaGeneral: "",
    firmaPacienteEducacion: "",
    firmaFisioterapeutaEducacion: "",
    
    _actualizarSesiones: true
  };

  console.log('üîÑ Enviando cambio con limpieza de firmas...');
  console.log('   - Agregando firmas f√≠sicas: ‚úÖ');
  console.log('   - Limpiando firmas educaci√≥n: ‚úÖ');

  const putResponse = await fetch(`${BASE_URL}/consentimiento-perinatal/${valoracionId}`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(datosActualizados)
  });

  if (!putResponse.ok) {
    throw new Error(`Error actualizando: ${putResponse.statusText}`);
  }

  console.log('‚úÖ Cambio enviado correctamente');
}

async function verificarSoloFirmasFisicas(valoracionId) {
  const response = await fetch(`${BASE_URL}/consentimiento-perinatal/${valoracionId}`);
  const valoracion = await response.json();
  
  console.log('üìã Estado final de firmas:');
  
  // Verificar firmas f√≠sicas (deben estar presentes)
  console.log('   F√çSICAS:');
  console.log(`     - firmaPacienteFisico: ${valoracion.firmaPacienteFisico ? '‚úÖ PRESENTE' : '‚ùå FALTA'}`);
  console.log(`     - firmaFisioterapeutaFisico: ${valoracion.firmaFisioterapeutaFisico ? '‚úÖ PRESENTE' : '‚ùå FALTA'}`);
  
  // Verificar firmas educaci√≥n (deben estar vac√≠as)
  console.log('   EDUCACI√ìN (deben estar vac√≠as):');
  console.log(`     - firmaPacienteGeneral: ${valoracion.firmaPacienteGeneral ? '‚ùå A√öN PRESENTE' : '‚úÖ LIMPIA'}`);
  console.log(`     - firmaFisioterapeutaGeneral: ${valoracion.firmaFisioterapeutaGeneral ? '‚ùå A√öN PRESENTE' : '‚úÖ LIMPIA'}`);
  console.log(`     - firmaPacienteEducacion: ${valoracion.firmaPacienteEducacion ? '‚ùå A√öN PRESENTE' : '‚úÖ LIMPIA'}`);
  console.log(`     - firmaFisioterapeutaEducacion: ${valoracion.firmaFisioterapeutaEducacion ? '‚ùå A√öN PRESENTE' : '‚úÖ LIMPIA'}`);
  
  // Verificar tipo de programa
  console.log(`   TIPO: ${valoracion.tipoPrograma} ${valoracion.tipoPrograma === 'fisico' ? '‚úÖ' : '‚ùå'}`);
  
  // Validaciones
  const errores = [];
  
  if (!valoracion.firmaPacienteFisico) errores.push('Falta firmaPacienteFisico');
  if (!valoracion.firmaFisioterapeutaFisico) errores.push('Falta firmaFisioterapeutaFisico');
  if (valoracion.firmaPacienteGeneral) errores.push('firmaPacienteGeneral no se limpi√≥');
  if (valoracion.firmaFisioterapeutaGeneral) errores.push('firmaFisioterapeutaGeneral no se limpi√≥');
  if (valoracion.firmaPacienteEducacion) errores.push('firmaPacienteEducacion no se limpi√≥');
  if (valoracion.firmaFisioterapeutaEducacion) errores.push('firmaFisioterapeutaEducacion no se limpi√≥');
  
  if (errores.length > 0) {
    throw new Error(`‚ùå Errores encontrados:\n${errores.map(e => `   - ${e}`).join('\n')}`);
  }
  
  console.log('‚úÖ Limpieza de firmas exitosa - Solo quedan firmas f√≠sicas');
}

// Funci√≥n para mostrar el problema actual (sin limpiar firmas)
async function mostrarProblemaActual() {
  console.log('üö® DEMOSTRANDO EL PROBLEMA ACTUAL...\n');
  
  try {
    // Crear con educaci√≥n
    const valoracionId = await crearConEducacion();
    
    // Cambiar a f√≠sico SIN limpiar (como hace actualmente el frontend)
    const getResponse = await fetch(`${BASE_URL}/consentimiento-perinatal/${valoracionId}`);
    const valoracion = await getResponse.json();
    
    const datosProblematicos = {
      ...valoracion,
      tipoPrograma: "fisico",
      // Solo agregar firmas f√≠sicas, NO limpiar las de educaci√≥n
      firmaPacienteFisico: "https://test.com/firma-paciente-fisico.png",
      firmaFisioterapeutaFisico: "https://test.com/firma-fisio-fisico.png",
      _actualizarSesiones: true
    };

    await fetch(`${BASE_URL}/consentimiento-perinatal/${valoracionId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(datosProblematicos)
    });

    // Verificar el problema
    const responseProblema = await fetch(`${BASE_URL}/consentimiento-perinatal/${valoracionId}`);
    const valoracionProblema = await responseProblema.json();
    
    console.log('üö® PROBLEMA: Firmas de ambos tipos presentes:');
    console.log(`   - Tipo programa: ${valoracionProblema.tipoPrograma}`);
    console.log(`   - Firmas f√≠sicas: ${valoracionProblema.firmaPacienteFisico ? 'S√ç' : 'NO'}`);
    console.log(`   - Firmas educaci√≥n: ${valoracionProblema.firmaPacienteEducacion ? 'S√ç' : 'NO'}`);
    console.log('   ‚ùå Ambos tipos de firmas est√°n presentes cuando solo deber√≠an estar las f√≠sicas');
    
  } catch (error) {
    console.error('Error demostrando problema:', error);
  }
}

// Ejecutar ambos tests
async function ejecutarTests() {
  await mostrarProblemaActual();
  console.log('\n' + '='.repeat(50) + '\n');
  await testLimpiezaFirmas();
}

ejecutarTests();